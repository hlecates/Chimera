NoSQL Summary:
Short for "Not Only SQL." Referring to non-relational databases, that store data in a non-tabular form, rather than a rule baased relational database. There are 5 types:

Document Databses:
    Used to store and query semi-structured data. Data is stored in JSON-like documents. easy to create and update applications without referencing a primary schema. 

Key-Value (KV) Stores: kv_engine.py

    Simple key-value databse, which uses an associative array, ie a map or dictionary, where each key is associated with one value in a collection.

    Within each KV pair the key is represented by an arbitrary string, ie a filename, and the value is any from of data (image, document, user preference). The value is a 'blob'
    with no upfront data modeling or schema definition

    In general the KV srtoes have query language. They provide a way to store, retrive, and update using standard get, put, and delete commands. The path to 
    retrieve the data is a direct request to the object in memory.

    The store of the KV store is a "mapping of mappings." Essentially self.store is a standard python dict whose keys are collections, and each value is another python dict which is referred to as a bukcet.
    The buckets map the keys to the correspondings bytes or 'blobs.'

    put()
        Upsert nature --> if the key DOES NOT exist, insert the (key, value), if the key DOES exist overwrite the old blob with the new value
        Atomicity --> Entire write must succeed completely
        Durability/persistence --> WAL, must append [PUT, key, value] to the log BEFORE mutating the in-memory map
        Errors & Exceptions --> InvalidKeyError if the key is empty or to long, ValueToolargeError if the value excees configured max size, IOError if the disk write fails

    get()
        Lookup --> hash the key, locate its associated bucket in-memory and return its blob

    delete()
        Idempotent Removal --> if the key exists, remove it and record deletion, if key does not exists raise error


Column-oriented Databases:
    Store and read data in rows and organize in sets of columns. Column names and formatting in wide-column stores can vary from row to row. 

Graph Databases:
    Organize data as nodes in a graph, focusing on relationships between data elements. Connections between nodes are stored as first-class elements. 

In-Memory Databases:
    Store data in memory to provide ultra-low latency for real-time applications. 


ACID:
    Atomic --> All operations in a transaction succeed or the operation is rolled back
    Consistent --> On the completion of a transaction, the database is structurally sound
    Isolated --> Transactions do not contend with one another. Contentious access to data is moderated by the database so transactions appear sequentially
    Durable --> The results of applying a transaction are permanent, even in the presence of a failure. 


Write Ahead Logging + Snapshot:
